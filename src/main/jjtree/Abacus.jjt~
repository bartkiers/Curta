options {
  STATIC=false;
  OUTPUT_DIRECTORY="/home/bart/Programming/JavaCC/Abacus/src/abacus";
  //MULTI=true;
  //NODE_DEFAULT_VOID=true;
  //NODE_PREFIX="";
  NODE_CLASS="AbacusNode";
}

PARSER_BEGIN(Abacus)

package abacus;

public class Abacus {

  public Abacus() {
  }
  
  public Object eval(String source) throws Exception {
    Abacus parser = new Abacus(new java.io.StringReader(source));
    AbacusNode root = parser.ast();
    return eval(root);
  }

  private Object eval(AbacusNode node) {
    switch(node.id) {
      case JJTROOT:
        System.out.println("ROOT");
        break;
      default:
        System.out.println("OTHER");
    }
    return null;
  }

  public static void main(String[] args) throws Exception {
    Object value = new Abacus().eval("s = matrix('foo.txt'); return s");
    System.out.println("value=" + value);
  }
}

PARSER_END(Abacus)

/**
 * Lexer rules
 */
TOKEN :
{
     < EOS        : ";" | "\r\n" | "\n" | "\r" >
  |  < OBrace     : "{" >
  |  < CBrace     : "}" >
  |  < OParen     : "(" >
  |  < CParen     : ")" >
  |  < Assign     : "=" >
  |  < Or         : "||" >
  |  < And        : "&&" >
  |  < Add        : "+" >
  |  < Sub        : "-" >
  |  < Mul        : "*" >
  |  < Div        : "/" >
  |  < GTE        : ">=" >
  |  < GT         : ">" >
  |  < LTE        : "<=" >
  |  < LT         : "<" >
  |  < Eq         : "==" >
  |  < NEq        : "!=" >
  |  < Not        : "!" >
  |  < Comma      : "," >
  |  < True       : "true" >
  |  < False      : "false" >
  |  < Return     : "return" >
  |  < Sqrt       : "sqrt" >
  |  < Sin        : "sin" >
  |  < Cos        : "cos" >
  |  < Max        : "max" >
  |  < Min        : "min" >
  |  < Matrix     : "matrix" >
  |  < Number     : (<Digit>)+ ("." (<Digit>)+)? >
  |  < Str        : "'" (~["'","\\","\r","\n"] | "\\" ["'","\\"])* "'" >
  |  < Identifier : ("_" | <Letter>) ("_" | <AlphaNum>)* >
}

TOKEN :
{
     < #Digit    : ["0"-"9"] >
  |  < #Letter   : ["a"-"z","A"-"Z"] >
  |  < #AlphaNum : <Letter> | <Digit> >
}

SKIP :
{
     " " 
  |  "\t"
}

/**
 * Parser rulesjavacc options
 */
AbacusNode ast() #Root :
{}
{
  (<EOS>)* statements() <EOF> {return jjtThis;}
}

void statements() :
{}
{
  (assignment() (<EOS>)+)* ret()
}

void ret() #Return :
{}
{
  <Return> expr() (<EOS>)*
}

void assignment() #Assign :
{}
{
  id() <Assign> expr()
}

void expr() :
{}
{
  or()
}

void or() :
{}
{
  and() ( <Or> and() #Or(2)
        )*
}

void and() :
{}
{
  equality() ( <And> equality() #And(2)
             )*
}

void equality() :
{}
{
  relational() ( <Eq>  relational() #Eq(2)
               | <NEq> relational() #NEq(2)
               )*
}

void relational() :
{}
{
  add() ( <GTE> add() #GTE(2)
        | <LTE> add() #LTE(2)
        | <GT>  add() #GT(2)
        | <LT>  add() #LT(2)
        )*
}

void add() :
{}
{
  mul() ( <Add> mul() #Add(2)
        | <Sub> mul() #Sub(2)
        )*
}

void mul() :
{}
{
  unary() ( <Mul> unary() #Mul(2)
          | <Div> unary() #Div(2)
          )*
}

void unary() :
{}
{
     <Sub> atom() #UnarySub
  |  <Not> atom() #Not
  |  atom()
}

void atom() :
{}
{
     function()
  |  num()
  |  id()
  |  bool()
  |  str()
  |  matrix()
  |  <OParen> expr() <CParen>
}

void num() #Num :
{
  Token t;
}
{
  t=<Number> {jjtThis.value = Double.valueOf(t.image);}
}

void id() #Id :
{
  Token t;
}
{
  t=<Identifier> {jjtThis.value = t.image;}
}

void bool() #Bool :
{
  Token t;
}
{
     <True>  {jjtThis.value = Boolean.TRUE;}
  |  <False> {jjtThis.value = Boolean.FALSE;}
}

void str() #Str : 
{
  Token t;
}
{
  t=<Str> {jjtThis.value = t.image.substring(1, t.image.length()-1).replaceAll("\\\\(.)", "$1");}
}

void matrix() #Matrix : {}
{
  <OBrace> (row() (<Comma> row())*)? <CBrace> {jjtThis.value = new abacus.MatrixNode(jjtThis);}
}

void row() #Row : 
{}
{
  <OBrace> (expr() (<Comma> expr())*)? <CBrace>
}

void function() : 
{}
{
     <Sqrt>   params() #Sqrt
  |  <Sin>    params() #Sin
  |  <Cos>    params() #Cos
  |  <Max>    params() #Max
  |  <Min>    params() #Min
  |  <Matrix> params() #ReadMatrix
}

void params() #Params : 
{}
{
  <OParen> (expr() (<Comma> expr())*)? <CParen>
}

